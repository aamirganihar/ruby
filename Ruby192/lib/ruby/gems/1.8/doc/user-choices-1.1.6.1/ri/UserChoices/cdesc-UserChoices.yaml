--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: "UserChoices provides a unified interface to more than one source of user choices: the command line, environment variables, configuration files, and the choice to use program defaults. A typical usage defines allowable choices within the framework of a Command object:"
- !ruby/struct:SM::Flow::VERB 
  body: "    class Example &lt; Command\n\n      # The sources are the various places in which the user can\n      # describe her choices to the program.\n\n      def add_sources(builder)\n        builder.add_source(...)\n        ...\n      end\n\n      # Each individual choice is named with a symbol that is common\n      # to all sources.\n      def add_choices(builder)\n        builder.add_choice(:choice, ...) { | command_line | ... }\n      end\n\n      # Immediately after recording the choices, the program can\n      # add new (derived ones) or do any other once-per-program\n      # initialization.\n      def postprocess_user_choices\n        ... @user_choices ...\n      end\n\n      # Perform the command.\n      def execute\n        ...\n      end\n    end\n\n    ...\n    CommandLineExample.new.execute\n    ...\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Describing sources
- !ruby/struct:SM::Flow::P 
  body: Sources are described by ChoicesBuilder#add_source.
- !ruby/struct:SM::Flow::P 
  body: EnvironmentSource describes the use of environment variables as sources. The following says that all environment variables beginning with &quot;amazon_&quot; are choices about this program.
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_source(EnvironmentSource, :with_prefix, &quot;amazon_&quot;)\n"
- !ruby/struct:SM::Flow::P 
  body: XmlConfigFileSource points to a configuration file with choices.
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_source(XmlConfigFileSource, :from_file, &quot;ms-config.xml&quot;)\n"
- !ruby/struct:SM::Flow::P 
  body: "CommandLineSource uses the command line options and arguments as a source of choices. The following gives the usage line for the script:"
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_source(CommandLineSource, :usage,\n                       &quot;Usage ruby #{$0} [options] names...&quot;)\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Describing choices
- !ruby/struct:SM::Flow::P 
  body: The end result of the process is a hash mapping choices to chosen values. Choices are named by symbols. They are described by ChoicesBuilder#add_choice. Here are simple examples that don't involve the command line.
- !ruby/struct:SM::Flow::P 
  body: The first just names a choice.
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_choice(:ordinary_choice)\n"
- !ruby/struct:SM::Flow::P 
  body: "The second gives a default value:"
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_choice(:ordinary_choice,\n                       :default =&gt; &quot;eaargh&quot;)\n"
- !ruby/struct:SM::Flow::P 
  body: The second gives a default value and a type. The type is used to check the value and, if appropriate, to convert the value away from a string. Note that the default is always a string regardless of the type.
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_choice(:on,\n                       :default =&gt; &quot;false&quot;,\n                       :type =&gt; :boolean)\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Command line options
- !ruby/struct:SM::Flow::P 
  body: ChoicesBuilder#add_choice passes a CommandLineSource object to a block. That can be used to describe the command line. The syntax is the same as OptionParser.
- !ruby/struct:SM::Flow::P 
  body: In the following, <tt>ordinary_choice</tt> can be specified with either the <tt>-o</tt> or <tt>--ordinary-choice</tt> options. The strings also appear in help messages (automatically produced from <tt>ruby script --help</tt>).
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_choice(:ordinary_choice,\n                       :default =&gt; 'default') { | command_line |\n      command_line.uses_option(&quot;-o&quot;, &quot;--ordinary-choice CHOICE&quot;,\n                               &quot;CHOICE can be any string.&quot;)\n    }\n"
- !ruby/struct:SM::Flow::P 
  body: "The command line's argument list (everything that's not an option) can be bundled up into another choice. Here, the arguments become an array named by <tt>:names</tt>:"
- !ruby/struct:SM::Flow::VERB 
  body: "    builder.add_choice(:names) { | command_line |\n      command_line.uses_arglist\n    }\n"
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Using choices
- !ruby/struct:SM::Flow::P 
  body: Most often, choices are used within the context of a Command object. They are stored in a hash named by instance variable <tt>@user_choices</tt> (or accessor <tt>user_choices</tt>).
- !ruby/struct:SM::Flow::VERB 
  body: "  class AffinityTripCommand &lt; Command\n    ...\n    def execute\n      starting_url = @strategy.url_for(self.user_choices[:isbn])\n      take_trip(starting_url, self.user_choices[:trip_steps])\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: You can construct the hash directly with ChoicesBuilder#build. That's not needed or used when using the Command object.
constants: []

full_name: UserChoices
includes: []

instance_methods: []

name: UserChoices
superclass: 
