--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: If this option is set to true then a corresponding method is automatically generated when you create a new Windows::API object.
- !ruby/struct:SM::Flow::P 
  body: "For example, instead of doing this:"
- !ruby/struct:SM::Flow::VERB 
  body: "   module Windows\n      module File\n         GetFileAttributes = API.new('GetFileAttributes', 'P', 'L')\n\n         def GetFileAttributes(x)\n            GetFileAttributes.call(x)\n         end\n      end\n   end\n"
- !ruby/struct:SM::Flow::P 
  body: You can do this, and have the method autogenerated for you.
- !ruby/struct:SM::Flow::VERB 
  body: "   module Windows\n      module File\n         API.auto_namespace = 'Windows::File'\n         API.auto_constant  = true\n         API.auto_method    = true\n         API.new('GetFileAttributes', 'P', 'L')\n      end\n   end\n\n   include Windows::File\n   GetFileAttributes('C:/test.txt') # vs. GetFileAttributes.call\n"
- !ruby/struct:SM::Flow::P 
  body: If the Windows::API object is declared to be a boolean in the constructor, then the method definition automatically includes a '!= 0' clause at the end of the call. That way, you can do 'if SomeMethod(x)' instead of having to do 'if SomeMethod(x) != 0', and it will do the right thing.
- !ruby/struct:SM::Flow::P 
  body: If the API.auto_unicode option is also set to true, then you will get three method definitions. The standard function name, the explicit ANSI ('A') version and the explicit Unicode/wide version ('W'). The exception to this rule is that the explicit ANSI and Unicode methods will NOT be generated if the function passed to the constructor already ends with 'A' or 'W'.
full_name: Windows::API::auto_method=
is_singleton: true
name: auto_method=
params: (bool)
visibility: public
