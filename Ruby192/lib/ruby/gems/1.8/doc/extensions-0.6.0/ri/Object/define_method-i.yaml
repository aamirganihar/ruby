--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Defines a singleton method on the object. For example, the following are equivalent (assume <tt>o = Object.new</tt>):"
- !ruby/struct:SM::Flow::VERB 
  body: "  def o.add(x, y)\n    x + y\n  end\n\n  o.define_method(:add) do |x, y|\n    x + y\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The difference is that with <tt>define_method</tt>, you can use variables local to the <em>current</em> scope.
- !ruby/struct:SM::Flow::VERB 
  body: "  x = 5\n  o.define_method(:add_x) do |n|\n    x + n\n  end\n  o.add_x(11)          # -&gt; 16\n"
- !ruby/struct:SM::Flow::P 
  body: You can't define such a method as <tt>add_x</tt> above with <tt>def o.add_x; x + n; end</tt>, as <tt>def</tt> introduces a new scope.
- !ruby/struct:SM::Flow::P 
  body: "There are three ways to provide the body of the method: with a block (as in both examples above), or with a <tt>Proc</tt> or <tt>Method</tt> object. See the built-in method <tt>Module#define_method</tt> for details."
- !ruby/struct:SM::Flow::P 
  body: (This method is exactly equivalent to calling <tt>Module#define_method</tt> in the scope of the singleton class of the object.)
full_name: Object#define_method
is_singleton: false
name: define_method
params: (*args, &block)
visibility: public
