--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: <tt>require_relative</tt> complements the builtin method <tt>require</tt> by allowing you to load a file that is <em>relative to the file containing the require_relative statement</em>.
- !ruby/struct:SM::Flow::P 
  body: When you use <tt>require</tt> to load a file, you are usually accessing functionality that has been properly installed, and made accessible, in your system. <tt>require</tt> does not offer a good solution for loading files within the project's code. This may be useful during a development phase, for accessing test data, or even for accessing files that are &quot;locked&quot; away inside a project, not intended for outside use.
- !ruby/struct:SM::Flow::P 
  body: "For example, if you have unit test classes in the &quot;test&quot; directory, and data for them under the test &quot;test/data&quot; directory, then you might use a line like this in a test case:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require_relative &quot;data/customer_data_1&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: Since neither &quot;test&quot; nor &quot;test/data&quot; are likely to be in Ruby's library path (and for good reason), a normal <tt>require</tt> won't find them. <tt>require_relative</tt> is a good solution for this particular problem.
- !ruby/struct:SM::Flow::P 
  body: You may include or omit the extension (<tt>.rb</tt> or <tt>.so</tt>) of the file you are loading.
- !ruby/struct:SM::Flow::P 
  body: <em>path</em> must respond to <tt>to_str</tt>.
full_name: Kernel#require_relative
is_singleton: false
name: require_relative
params: (path)
visibility: public
