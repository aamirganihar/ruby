--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns the Resent-Bcc value of the mail object as an array of strings of address specs.
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: " mail.resent_bcc = 'Mikel &lt;mikel@test.lindsaar.net&gt;'\n mail.resent_bcc #=&gt; ['mikel@test.lindsaar.net']\n mail.resent_bcc = 'Mikel &lt;mikel@test.lindsaar.net&gt;, ada@test.lindsaar.net'\n mail.resent_bcc #=&gt; ['mikel@test.lindsaar.net', 'ada@test.lindsaar.net']\n"
- !ruby/struct:SM::Flow::P 
  body: Also allows you to set the value by passing a value as a parameter
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: " mail.resent_bcc 'Mikel &lt;mikel@test.lindsaar.net&gt;'\n mail.resent_bcc #=&gt; ['mikel@test.lindsaar.net']\n"
- !ruby/struct:SM::Flow::P 
  body: Additionally, you can append new addresses to the returned Array like object.
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: " mail.resent_bcc 'Mikel &lt;mikel@test.lindsaar.net&gt;'\n mail.resent_bcc &lt;&lt; 'ada@test.lindsaar.net'\n mail.resent_bcc #=&gt; ['mikel@test.lindsaar.net', 'ada@test.lindsaar.net']\n"
full_name: Mail::Message#resent_bcc
is_singleton: false
name: resent_bcc
params: ( val = nil )
visibility: public
