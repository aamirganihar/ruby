--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Two emails are the same if they have the same fields and body contents. One gotcha here is that Mail will insert Message-IDs when calling encoded, so doing mail1.encoded == mail2.encoded is most probably not going to return what you think as the assigned Message-IDs by Mail (if not already defined as the same) will ensure that the two objects are unique, and this comparison will ALWAYS return false.
- !ruby/struct:SM::Flow::P 
  body: "So the == operator has been defined like so: Two messages are the same if they have the same content, ignoring the Message-ID field, unless BOTH emails have a defined and different Message-ID value, then they are false."
- !ruby/struct:SM::Flow::P 
  body: "So, in practice the == operator works like this:"
- !ruby/struct:SM::Flow::VERB 
  body: " m1 = Mail.new(&quot;Subject: Hello\\r\\n\\r\\nHello&quot;)\n m2 = Mail.new(&quot;Subject: Hello\\r\\n\\r\\nHello&quot;)\n m1 == m2 #=&gt; true\n\n m1 = Mail.new(&quot;Subject: Hello\\r\\n\\r\\nHello&quot;)\n m2 = Mail.new(&quot;Message-ID: &lt;1234@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m1 == m2 #=&gt; true\n\n m1 = Mail.new(&quot;Message-ID: &lt;1234@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m2 = Mail.new(&quot;Subject: Hello\\r\\n\\r\\nHello&quot;)\n m1 == m2 #=&gt; true\n\n m1 = Mail.new(&quot;Message-ID: &lt;1234@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m2 = Mail.new(&quot;Message-ID: &lt;1234@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m1 == m2 #=&gt; true\n\n m1 = Mail.new(&quot;Message-ID: &lt;1234@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m2 = Mail.new(&quot;Message-ID: &lt;DIFFERENT@test&gt;\\r\\nSubject: Hello\\r\\n\\r\\nHello&quot;)\n m1 == m2 #=&gt; false\n"
full_name: Mail::Message#==
is_singleton: false
name: ==
params: (other)
visibility: public
